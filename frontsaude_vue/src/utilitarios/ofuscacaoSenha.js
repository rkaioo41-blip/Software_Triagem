// ofuscacaoSenha.js
import { tabelaSaude } from "./tabelaSaude";

export function ofuscarSenha(senha) {
  console.log("üîê Iniciando ofusca√ß√£o da senha:", senha);

  // 1Ô∏è‚É£ Invers√£o
  const invertida = senha.split("").reverse().join("");
  console.log("1Ô∏è‚É£ Senha invertida:", invertida);

  // 2Ô∏è‚É£ XOR
  const chaveXOR = 42;
  const xorArray = [...invertida].map(c => c.charCodeAt(0) ^ chaveXOR);
  console.log("2Ô∏è‚É£ XOR aplicado:", xorArray);

  // 3Ô∏è‚É£ Deslocamento modular
  const deslocamento = 7;
  const deslocados = xorArray.map(n => (n + deslocamento) % tabelaSaude.length);
  console.log("3Ô∏è‚É£ Ap√≥s deslocamento modular:", deslocados);

  // 4Ô∏è‚É£ Mapeamento na tabela da sa√∫de
  const elementos = deslocados.map(n => tabelaSaude[n % tabelaSaude.length]);
  console.log("4Ô∏è‚É£ Mapeado na tabela da sa√∫de:", elementos);

  // 5Ô∏è‚É£ Permuta√ß√£o de blocos (troca pares consecutivos)
  for (let i = 0; i < elementos.length - 1; i += 2) {
    [elementos[i], elementos[i + 1]] = [elementos[i + 1], elementos[i]];
  }
  console.log("5Ô∏è‚É£ Ap√≥s permuta√ß√£o de blocos:", elementos);

  // 6Ô∏è‚É£ Padding seguro - agora com mais valores e min√∫sculo
  const padding = ["aa","bb","cc","dd","ee","ff","gg","hh","ii","jj"];
  let j = 0;
  for (let i = 0; i < elementos.length; i += 2) {
    elementos.splice(i, 0, padding[j % padding.length]);
    j++;
  }
  console.log("6Ô∏è‚É£ Ap√≥s padding seguro:", elementos);

  // 7Ô∏è‚É£ Remover qualquer undefined e juntar em string final
  const senhaOfuscada = elementos.filter(Boolean).join("");
  console.log("7Ô∏è‚É£ Senha final ofuscada:", senhaOfuscada);

  return { senhaOfuscada };
}
